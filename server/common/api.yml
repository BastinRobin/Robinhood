swagger: '2.0'
info:
    version: 1.0.0
    title: Carehome
    description: 'Carehome Microservices'
basePath: /v1
tags:
    - {name: Users, description: 'Users API'}
    - {name: Tenants, description: 'Tenants API'}
    - {name: Auth, description: 'Authentication API'}
    - {name: Profiletype, description: 'Profiletype API'}
    - {name: Addresstype, description: 'Addresstype API'}
    - {name: Country, description: 'Country API'}
    - {name: Profile, description: 'Profile API'}
    - {name: Nextofkin, description: 'Nextofkin API'}
    - {name: Address, description: 'Address API'}
    - {name: Branch, description: 'Branch API'}
    - {name: Additionalnotes, description: 'Additionalnotes API'}
    - {name: Generalinfo, description: 'Generalinfo API'}
    - {name: Accommodationdetails, description: 'Accommodationdetails API'}
    - {name: Carerskill, description: 'Carerskill API'}
    - {name: Carerspacialities, description: 'Carerspacialities API'}
    - {name: Role, description: 'Role API'}
    - {name: Profilerole, description: 'Profilerole API'}
    - {name: Rating, description: 'Rating API'}
    - {name: Availability, description: 'Availability API'}
    - {name: Employmentdetails, description: 'Employmentdetails API'}
    - {name: Appointment, description: 'Appointment API'}
    - {name: Appointedcarer, description: 'Appointedcarer API'}
    - {name: Plantypes, description: 'Plantypes API'}
    - {name: Service, description: 'Service API'}
    - {name: Careplan, description: 'Careplan API'}
    - {name: Careservice, description: 'Careservice API'}
    - {name: Appointmentservice, description: 'Appointmentservice API'}
    - {name: Careplandetails, description: 'Careplandetails API'}
    - {name: Document, description: 'Document API'}
    - {name: Carerdocument, description: 'Carerdocument API'}
    - {name: Residentdocument, description: 'Residentdocument API'}
    - {name: Profiledocument, description: 'Profiledocument API'}
    - {name: Permissions, description: 'Permissions API'}
    - {name: Profilepermission, description: 'Profilepermission API'}
    - {name: Contacttype, description: 'Contacttype API'}
    - {name: Contact, description: 'Contact API'}
    - {name: Jobtype, description: 'Jobtype API'}
    - {name: Upload, description: 'AWS S3 API'}
    - {name: Additionalinfo, description: 'Additionalinfo API'}
consumes:
    - application/json
produces:
    - application/json
securityDefinitions:
    ApiKeyAuth: {type: apiKey, in: header, name: token}
definitions:
    UserBody: {type: object, title: User, required: [user_name, password, email, enabled], properties: {user_name: {type: string, example: admin}, password: {type: string, example: admin}, email: {type: string, example: admin@example.com}, enabled: {type: boolean, example: true}}}
    TenantBody: {type: object, title: Tenant, required: [tenant_name, organization, config, is_deleted, db_user, db_password, db_port, db_host, email], properties: {organization: {type: string, example: 'Logezy Info Tech'}, config: {type: string, example: '{some json string}'}, is_deleted: {type: boolean, example: true}, db_user: {type: string, example: home_care}, db_password: {type: string, example: your_db_password}, db_port: {type: integer, example: 3306}, db_host: {type: string, example: localhost}, email: {type: string, example: admin@logezy.com}}}
    ProfiletypeBody: {type: object, title: Profiletype, required: [name], properties: {name: {type: string}}}
    AddresstypeBody: {type: object, title: Addresstype, required: [name], properties: {name: {type: string}}}
    CountryBody: {type: object, title: Country, required: [name, is_enabled], properties: {name: {type: string}, is_enabled: {type: boolean}}}
    ProfileBody: {type: object, title: Profile, required: [user_id, title, first_name, last_name, phone1, gender, is_enabled, is_deleted], properties: {user_id: {type: string}, title: {type: string}, first_name: {type: string}, last_name: {type: string}, image: {type: string}, nick_name: {type: string}, code: {type: string}, email: {type: string}, mobile_no: {type: string}, phone1: {type: string}, phone2: {type: string}, gender: {type: string}, religion: {type: string}, martial_status: {type: string}, date_of_birth: {type: string}, is_enabled: {type: boolean}, is_deleted: {type: boolean}, profile_type: {type: string}, job_type: {type: string}, branch: {type: string}}}
    NextofkinBody: {type: object, title: Nextofkin, required: [name, relationship, mobile_no], properties: {name: {type: string}, relationship: {type: string}, mobile_no: {type: string}, profile: {type: string}}}
    AddressBody: {type: object, title: Address, required: [address1, city, postal_code], properties: {address1: {type: string}, address2: {type: string}, city: {type: string}, postal_code: {type: string}, latitude: {type: string}, longitude: {type: string}, profile: {type: string}, addresstype: {type: string}, country: {type: string}}}
    BranchBody: {type: object, title: Branch, required: [name, latitude, longitude, postal_code, street, is_enabled], properties: {name: {type: string}, latitude: {type: string}, longitude: {type: string}, postal_code: {type: string}, town: {type: string}, street: {type: string}, is_enabled: {type: boolean}, country: {type: string}}}
    AdditionalnotesBody: {type: object, title: Additionalnotes, required: [note, type], properties: {note: {type: string}, type: {type: string}, profile: {type: string}}}
    GeneralinfoBody: {type: object, title: Generalinfo, required: [], properties: {hobbiles: {type: string}, interests: {type: string}, routines: {type: string}, likes: {type: string}, dislikes: {type: string}, additional_info: {type: string}, previous_occupation: {type: string}, profile: {type: string}}}
    AccommodationdetailsBody: {type: object, title: Accommodationdetails, required: [owner_type], properties: {owner_type: {type: string}, access_to_home: {type: string}, equipment_and_supplies: {type: string}, living_status: {type: string}, accommodation_info: {type: string}, accommodation_type: {type: string}, profile: {type: string}}}
    CarerskillBody: {type: object, title: Carerskill, required: [name], properties: {name: {type: string}, profile: {type: string}}}
    CarerspacialitiesBody: {type: object, title: Carerspacialities, required: [name], properties: {name: {type: string}, profile: {type: string}}}
    RoleBody: {type: object, title: Role, required: [name, is_enabled], properties: {name: {type: string}, description: {type: string}, is_enabled: {type: boolean}}}
    ProfileroleBody: {type: object, title: Profilerole, required: [], properties: {is_enabled: {type: boolean}, role: {type: string}, profile: {type: string}}}
    RatingBody: {type: object, title: Rating, required: [value, no], properties: {value: {type: double}, no: {type: string}, profile: {type: string}}}
    AvailabilityBody: {type: object, title: Availability, required: [date, status], properties: {date: {type: date}, status: {type: number}, profile: {type: string}}}
    EmploymentdetailsBody: {type: object, title: Employmentdetails, required: [start_date, dbs_number, monthly_working_hours, location_latitude, location_longitude, travel_mod, rate_per_hour], properties: {start_date: {type: date}, end_date: {type: date}, dbs_number: {type: string}, car_insurance: {type: string}, monthly_working_hours: {type: number}, location_latitude: {type: string}, location_longitude: {type: string}, travel_mod: {type: string}, rate_per_hour: {type: number}, profile: {type: string}}}
    AppointmentBody: {type: object, title: Appointment, required: [date, start_time, end_time, break, status, published, notes], properties: {date: {type: date}, start_time: {type: date}, end_time: {type: date}, break: {type: number}, status: {type: number}, published: {type: boolean}, notes: {type: string}}}
    AppointedcarerBody: {type: object, title: Appointedcarer, required: [no], properties: {no: {type: string}, profile: {type: string}, appointment: {type: string}}}
    PlantypesBody: {type: object, title: Plantypes, required: [name, is_enabled], properties: {name: {type: string}, is_enabled: {type: boolean}}}
    ServiceBody: {type: object, title: Service, required: [name], properties: {name: {type: string}, plan_type: {type: string}}}
    CareplanBody: {type: object, title: Careplan, required: [], properties: {service: {type: string}, profile: {type: string}}}
    CareserviceBody: {type: object, title: Careservice, required: [], properties: {service: {type: string}, profile: {type: string}}}
    AppointmentserviceBody: {type: object, title: Appointmentservice, required: [status, start_time], properties: {status: {type: boolean}, start_time: {type: date}, appointment: {type: string}, service: {type: string}}}
    CareplandetailsBody: {type: object, title: Careplandetails, required: [self_manageable], properties: {self_manageable: {type: boolean}, manageable_with_support: {type: boolean}, fully_dependent: {type: boolean}, additional_details: {type: string}, any_concerns: {type: string}, care_plan: {type: string}}}
    DocumentBody: {type: object, title: Document, required: [name, is_enabled], properties: {name: {type: string}, description: {type: string}, is_enabled: {type: boolean}}}
    CarerdocumentBody: {type: object, title: Carerdocument, required: [], properties: {document: {type: string}}}
    ResidentdocumentBody: {type: object, title: Residentdocument, required: [], properties: {document: {type: string}}}
    ProfiledocumentBody: {type: object, title: Profiledocument, required: [document_url], properties: {document_url: {type: string}, document: {type: string}, profile: {type: string}}}
    PermissionsBody: {type: object, title: Permissions, required: [name, is_enabled], properties: {name: {type: string}, description: {type: string}, is_enabled: {type: boolean}}}
    ProfilepermissionBody: {type: object, title: Profilepermission, required: [], properties: {permission: {type: string}, profile: {type: string}}}
    ContacttypeBody: {type: object, title: Contacttype, required: [name, page_type], properties: {name: {type: string}, page_type: {type: string, example: 'resident | invoice'}, profile: {type: string}}}
    ContactBody: {type: object, title: Contact, required: [page_type, type, category], properties: {page_type: {type: string, example: 'resident | invoice'}, type: {type: string, example: 'Person | Organisation'}, category: {type: string, example: 'Primary | secondary'}, access_type: {type: string}, comments: {type: string}, contact_type: {type: string}, profile: {type: string}}}
    ResidentBody: {type: object, title: 'Resident Profile', required: [user, profile, address], properties: {user: {$ref: '#/definitions/UserBody'}, profile: {$ref: '#/definitions/ProfileBody'}, address: {$ref: '#/definitions/AddressBody'}}}
    CarerBody: {type: object, title: 'Carer Profile', properties: {user: {$ref: '#/definitions/UserBody'}, profile: {$ref: '#/definitions/ProfileBody'}, address: {$ref: '#/definitions/AddressBody'}}}
    JobtypeBody: {type: object, title: Jobtype, required: [name], properties: {name: {type: string}}}
    AdditionalinfoBody: {type: object, title: Additionalinfo, required: [], properties: {ethnicity: {type: string}, religion: {type: string}, language_spoken: {type: string}, martial_status: {type: string}, mode_of_communication: {type: string}, profile: {type: string}}}
paths:
    /users: {get: {security: [{ApiKeyAuth: []}], tags: [Users], description: 'Fetch all users', responses: {'200': {description: 'Returns all users'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Users], description: 'Create a new example', parameters: [{name: body, in: body, description: 'User object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/UserBody'}}], responses: {'200': {description: 'Returns all examples'}}}}
    '/users/{user_name}': {get: {security: [{ApiKeyAuth: []}], tags: [Users], parameters: [{name: user_name, in: path, required: true, description: 'The user_name of the user to retrieve', type: string}], responses: {'201': {description: 'Return the user with the specified user_name'}, '404': {description: 'User not found'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Users], parameters: [{name: user_name, in: path, required: true, description: 'The user_name of the user to delete', type: string}], responses: {'200': {description: 'Delete the user with the specified user_name'}, '404': {description: 'User not found'}}}}
    /tenants: {get: {security: [{ApiKeyAuth: []}], tags: [Tenants], description: 'Fetch all tenants', responses: {'200': {description: 'Returns all tenants'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Tenants], summary: 'Create a new tenant', parameters: [{name: body, in: body, description: 'Tenant object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/TenantBody'}}], responses: {'200': {description: 'Created new tenant'}}}}
    '/tenants/{tenant_name}': {get: {security: [{ApiKeyAuth: []}], tags: [Tenants], parameters: [{name: tenant_name, in: path, required: true, description: 'The tenant_name of the user to retrieve', type: string}], responses: {'201': {description: 'Return the user with the specified tenant_name'}, '404': {description: 'User not found'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Tenants], parameters: [{name: tenant_name, in: path, required: true, description: 'The tenant_name of the user to delete', type: string}], responses: {'200': {description: 'Delete the user with the specified tenant_name'}, '404': {description: 'User not found'}}}}
    /auth/login: {post: {tags: [Auth], consumes: [application/json], parameters: [{name: body, in: body, schema: {type: object, required: true, properties: {user_name: {type: string}, email: {type: string}, password: {type: string}}}}], responses: {'200': {description: 'Return the API authentication and authorization'}}}}
    /auth/client/signup: {post: {tags: [Auth], consumes: [application/json], parameters: [{name: body, in: body, required: true, schema: {type: object, required: true, properties: {user_name: {type: string}, password: {type: string}, email: {type: string}, organization: {type: string}, is_deleted: {type: boolean}, config: {type: string}}}}], responses: {'200': {description: 'Will create new tenant, user, user tenant'}}}}
    /auth/carer/signup: {post: {tags: [Auth], consumes: [application/json], parameters: [{name: body, in: body, required: true, schema: {type: object, required: true, properties: {user_name: {type: string}, password: {type: string}, slug: {type: string}}}}], responses: {'200': {description: 'Will signup new carer'}}}}
    /profiletype: {get: {security: [{ApiKeyAuth: []}], tags: [Profiletype], summary: 'Fetch all profiletype', description: 'Fetch all profiletype', responses: {'200': {description: 'Returns all profiletype'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Profiletype], description: 'Create a new profiletype', summary: 'Create a new profiletype', parameters: [{name: body, in: body, description: 'Profiletype object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/ProfiletypeBody'}}], responses: {'200': {description: 'Returns all profiletype'}}}}
    '/profiletype/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Profiletype], summary: 'Fetch specific profiletype from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Profiletype to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Profiletype], summary: 'Update existing profiletype', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated profiletype object', required: true, schema: {$ref: '#/definitions/ProfiletypeBody'}}], responses: {'200': {description: 'Update profiletype'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Profiletype], summary: 'Delete specific profiletype from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Profiletype to delete', type: string}], responses: {'200': {description: 'Delete the Profiletype with the specified id'}, '404': {description: 'Profiletype not found'}}}}
    /addresstype: {get: {security: [{ApiKeyAuth: []}], tags: [Addresstype], summary: 'Fetch all addresstype', description: 'Fetch all addresstype', responses: {'200': {description: 'Returns all addresstype'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Addresstype], description: 'Create a new addresstype', summary: 'Create a new addresstype', parameters: [{name: body, in: body, description: 'Addresstype object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/AddresstypeBody'}}], responses: {'200': {description: 'Returns all addresstype'}}}}
    '/addresstype/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Addresstype], summary: 'Fetch specific addresstype from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Addresstype to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Addresstype], summary: 'Update existing addresstype', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated addresstype object', required: true, schema: {$ref: '#/definitions/AddresstypeBody'}}], responses: {'200': {description: 'Update addresstype'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Addresstype], summary: 'Delete specific addresstype from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Addresstype to delete', type: string}], responses: {'200': {description: 'Delete the Addresstype with the specified id'}, '404': {description: 'Addresstype not found'}}}}
    /country: {get: {security: [{ApiKeyAuth: []}], tags: [Country], summary: 'Fetch all country', description: 'Fetch all country', responses: {'200': {description: 'Returns all country'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Country], description: 'Create a new country', summary: 'Create a new country', parameters: [{name: body, in: body, description: 'Country object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/CountryBody'}}], responses: {'200': {description: 'Returns all country'}}}}
    '/country/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Country], summary: 'Fetch specific country from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Country to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Country], summary: 'Update existing country', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated country object', required: true, schema: {$ref: '#/definitions/CountryBody'}}], responses: {'200': {description: 'Update country'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Country], summary: 'Delete specific country from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Country to delete', type: string}], responses: {'200': {description: 'Delete the Country with the specified id'}, '404': {description: 'Country not found'}}}}
    /profile: {get: {security: [{ApiKeyAuth: []}], tags: [Profile], summary: 'Fetch all profile', description: 'Fetch all profile', responses: {'200': {description: 'Returns all profile'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Profile], description: 'Create a new profile', summary: 'Create a new profile', parameters: [{name: body, in: body, description: 'Profile object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/ProfileBody'}}], responses: {'200': {description: 'Returns all profile'}}}}
    /profile/resident: {post: {security: [{ApiKeyAuth: []}], tags: [Profile], description: 'To create resident profile', summary: 'To create resident profile', parameters: [{name: body, in: body, description: 'Profile object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/ResidentBody'}}], responses: {'200': {description: 'Returns all profile'}}}}
    /profile/carer: {post: {security: [{ApiKeyAuth: []}], tags: [Profile], summary: 'To create carer profile', parameters: [{name: body, in: body, description: 'Profile object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/CarerBody'}}], responses: {'200': {description: 'Returns all profile'}}}}
    '/profile/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Profile], summary: 'Fetch specific profile from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Profile to retrieve', type: string}], responses: {'201': {description: 'Return the profile with the specified id'}, '404': {description: 'profile not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Profile], summary: 'Update existing profile', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated profile object', required: true, schema: {$ref: '#/definitions/ProfileBody'}}], responses: {'200': {description: 'Update profile'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Profile], summary: 'Delete specific profile from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Profile to delete', type: string}], responses: {'200': {description: 'Delete the Profile with the specified id'}, '404': {description: 'Profile not found'}}}}
    '/profile/type/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Profile], summary: 'Fetch all profile based on profile type', parameters: [{name: id, in: path, required: true, description: 'The id of the Profile type', type: string}], responses: {'201': {description: 'Return the all profile with the which matches profile type id'}, '404': {description: 'profile not found'}}}}
    /nextofkin: {get: {security: [{ApiKeyAuth: []}], tags: [Nextofkin], summary: 'Fetch all nextofkin', description: 'Fetch all nextofkin', responses: {'200': {description: 'Returns all nextofkin'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Nextofkin], description: 'Create a new nextofkin', summary: 'Create a new nextofkin', parameters: [{name: body, in: body, description: 'Nextofkin object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/NextofkinBody'}}], responses: {'200': {description: 'Returns all nextofkin'}}}}
    '/nextofkin/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Nextofkin], summary: 'Fetch specific nextofkin from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Nextofkin to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Nextofkin], summary: 'Update existing nextofkin', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated nextofkin object', required: true, schema: {$ref: '#/definitions/NextofkinBody'}}], responses: {'200': {description: 'Update nextofkin'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Nextofkin], summary: 'Delete specific nextofkin from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Nextofkin to delete', type: string}], responses: {'200': {description: 'Delete the Nextofkin with the specified id'}, '404': {description: 'Nextofkin not found'}}}}
    /address: {get: {security: [{ApiKeyAuth: []}], tags: [Address], summary: 'Fetch all address', description: 'Fetch all address', responses: {'200': {description: 'Returns all address'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Address], description: 'Create a new address', summary: 'Create a new address', parameters: [{name: body, in: body, description: 'Address object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/AddressBody'}}], responses: {'200': {description: 'Returns all address'}}}}
    '/address/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Address], summary: 'Fetch specific address from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Address to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Address], summary: 'Update existing address', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated address object', required: true, schema: {$ref: '#/definitions/AddressBody'}}], responses: {'200': {description: 'Update address'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Address], summary: 'Delete specific address from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Address to delete', type: string}], responses: {'200': {description: 'Delete the Address with the specified id'}, '404': {description: 'Address not found'}}}}
    /branch: {get: {security: [{ApiKeyAuth: []}], tags: [Branch], summary: 'Fetch all branch', description: 'Fetch all branch', responses: {'200': {description: 'Returns all branch'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Branch], description: 'Create a new branch', summary: 'Create a new branch', parameters: [{name: body, in: body, description: 'branch object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/BranchBody'}}], responses: {'200': {description: 'Returns all branch'}}}}
    '/branch/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Branch], summary: 'Fetch specific branch from id', parameters: [{name: id, in: path, required: true, description: 'The id of the branch to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Branch], summary: 'Update existing branch', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated branch object', required: true, schema: {$ref: '#/definitions/BranchBody'}}], responses: {'200': {description: 'Update branch'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Branch], summary: 'Delete specific branch from id', parameters: [{name: id, in: path, required: true, description: 'The id of the branch to delete', type: string}], responses: {'200': {description: 'Delete the branch with the specified id'}, '404': {description: 'branch not found'}}}}
    /additionalnotes: {get: {security: [{ApiKeyAuth: []}], tags: [Additionalnotes], summary: 'Fetch all additionalnotes', description: 'Fetch all additionalnotes', responses: {'200': {description: 'Returns all additionalnotes'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Additionalnotes], description: 'Create a new additionalnotes', summary: 'Create a new additionalnotes', parameters: [{name: body, in: body, description: 'additionalnotes object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/AdditionalnotesBody'}}], responses: {'200': {description: 'Returns all additionalnotes'}}}}
    '/additionalnotes/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Additionalnotes], summary: 'Fetch specific additionalnotes from id', parameters: [{name: id, in: path, required: true, description: 'The id of the additionalnotes to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Additionalnotes], summary: 'Update existing additionalnotes', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated additionalnotes object', required: true, schema: {$ref: '#/definitions/AdditionalnotesBody'}}], responses: {'200': {description: 'Update additionalnotes'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Additionalnotes], summary: 'Delete specific additionalnotes from id', parameters: [{name: id, in: path, required: true, description: 'The id of the additionalnotes to delete', type: string}], responses: {'200': {description: 'Delete the additionalnotes with the specified id'}, '404': {description: 'additionalnotes not found'}}}}
    /generalinfo: {get: {security: [{ApiKeyAuth: []}], tags: [Generalinfo], summary: 'Fetch all generalinfo', description: 'Fetch all generalinfo', responses: {'200': {description: 'Returns all generalinfo'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Generalinfo], description: 'Create a new generalinfo', summary: 'Create a new generalinfo', parameters: [{name: body, in: body, description: 'generalinfo object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/GeneralinfoBody'}}], responses: {'200': {description: 'Returns all generalinfo'}}}}
    '/generalinfo/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Generalinfo], summary: 'Fetch specific generalinfo from id', parameters: [{name: id, in: path, required: true, description: 'The id of the generalinfo to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Generalinfo], summary: 'Update existing generalinfo', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated generalinfo object', required: true, schema: {$ref: '#/definitions/GeneralinfoBody'}}], responses: {'200': {description: 'Update generalinfo'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Generalinfo], summary: 'Delete specific generalinfo from id', parameters: [{name: id, in: path, required: true, description: 'The id of the generalinfo to delete', type: string}], responses: {'200': {description: 'Delete the generalinfo with the specified id'}, '404': {description: 'generalinfo not found'}}}}
    /accommodationdetails: {get: {security: [{ApiKeyAuth: []}], tags: [Accommodationdetails], summary: 'Fetch all accommodationdetails', description: 'Fetch all accommodationdetails', responses: {'200': {description: 'Returns all accommodationdetails'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Accommodationdetails], description: 'Create a new accommodationdetails', summary: 'Create a new accommodationdetails', parameters: [{name: body, in: body, description: 'accommodationdetails object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/AccommodationdetailsBody'}}], responses: {'200': {description: 'Returns all accommodationdetails'}}}}
    '/accommodationdetails/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Accommodationdetails], summary: 'Fetch specific accommodationdetails from id', parameters: [{name: id, in: path, required: true, description: 'The id of the accommodationdetails to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Accommodationdetails], summary: 'Update existing accommodationdetails', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated accommodationdetails object', required: true, schema: {$ref: '#/definitions/AccommodationdetailsBody'}}], responses: {'200': {description: 'Update accommodationdetails'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Accommodationdetails], summary: 'Delete specific accommodationdetails from id', parameters: [{name: id, in: path, required: true, description: 'The id of the accommodationdetails to delete', type: string}], responses: {'200': {description: 'Delete the accommodationdetails with the specified id'}, '404': {description: 'accommodationdetails not found'}}}}
    /carerskill: {get: {security: [{ApiKeyAuth: []}], tags: [Carerskill], summary: 'Fetch all carerskill', description: 'Fetch all carerskill', responses: {'200': {description: 'Returns all carerskill'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Carerskill], description: 'Create a new carerskill', summary: 'Create a new carerskill', parameters: [{name: body, in: body, description: 'carerskill object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/CarerskillBody'}}], responses: {'200': {description: 'Returns all carerskill'}}}}
    '/carerskill/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Carerskill], summary: 'Fetch specific carerskill from id', parameters: [{name: id, in: path, required: true, description: 'The id of the carerskill to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Carerskill], summary: 'Update existing carerskill', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated carerskill object', required: true, schema: {$ref: '#/definitions/CarerskillBody'}}], responses: {'200': {description: 'Update carerskill'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Carerskill], summary: 'Delete specific carerskill from id', parameters: [{name: id, in: path, required: true, description: 'The id of the carerskill to delete', type: string}], responses: {'200': {description: 'Delete the carerskill with the specified id'}, '404': {description: 'carerskill not found'}}}}
    /carerspacialities: {get: {security: [{ApiKeyAuth: []}], tags: [Carerspacialities], summary: 'Fetch all carerspacialities', description: 'Fetch all carerspacialities', responses: {'200': {description: 'Returns all carerspacialities'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Carerspacialities], description: 'Create a new carerspacialities', summary: 'Create a new carerspacialities', parameters: [{name: body, in: body, description: 'carerspacialities object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/CarerspacialitiesBody'}}], responses: {'200': {description: 'Returns all carerspacialities'}}}}
    '/carerspacialities/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Carerspacialities], summary: 'Fetch specific carerspacialities from id', parameters: [{name: id, in: path, required: true, description: 'The id of the carerspacialities to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Carerspacialities], summary: 'Update existing carerspacialities', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated carerspacialities object', required: true, schema: {$ref: '#/definitions/CarerspacialitiesBody'}}], responses: {'200': {description: 'Update carerspacialities'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Carerspacialities], summary: 'Delete specific carerspacialities from id', parameters: [{name: id, in: path, required: true, description: 'The id of the carerspacialities to delete', type: string}], responses: {'200': {description: 'Delete the carerspacialities with the specified id'}, '404': {description: 'carerspacialities not found'}}}}
    /role: {get: {security: [{ApiKeyAuth: []}], tags: [Role], summary: 'Fetch all role', description: 'Fetch all role', responses: {'200': {description: 'Returns all role'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Role], description: 'Create a new role', summary: 'Create a new role', parameters: [{name: body, in: body, description: 'role object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/RoleBody'}}], responses: {'200': {description: 'Returns all role'}}}}
    '/role/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Role], summary: 'Fetch specific role from id', parameters: [{name: id, in: path, required: true, description: 'The id of the role to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Role], summary: 'Update existing role', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated role object', required: true, schema: {$ref: '#/definitions/RoleBody'}}], responses: {'200': {description: 'Update role'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Role], summary: 'Delete specific role from id', parameters: [{name: id, in: path, required: true, description: 'The id of the role to delete', type: string}], responses: {'200': {description: 'Delete the role with the specified id'}, '404': {description: 'role not found'}}}}
    /profilerole: {get: {security: [{ApiKeyAuth: []}], tags: [Profilerole], summary: 'Fetch all profilerole', description: 'Fetch all profilerole', responses: {'200': {description: 'Returns all profilerole'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Profilerole], description: 'Create a new profilerole', summary: 'Create a new profilerole', parameters: [{name: body, in: body, description: 'profilerole object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/ProfileroleBody'}}], responses: {'200': {description: 'Returns all profilerole'}}}}
    '/profilerole/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Profilerole], summary: 'Fetch specific profilerole from id', parameters: [{name: id, in: path, required: true, description: 'The id of the profilerole to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Profilerole], summary: 'Update existing profilerole', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated profilerole object', required: true, schema: {$ref: '#/definitions/ProfileroleBody'}}], responses: {'200': {description: 'Update profilerole'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Profilerole], summary: 'Delete specific profilerole from id', parameters: [{name: id, in: path, required: true, description: 'The id of the profilerole to delete', type: string}], responses: {'200': {description: 'Delete the profilerole with the specified id'}, '404': {description: 'profilerole not found'}}}}
    /rating: {get: {security: [{ApiKeyAuth: []}], tags: [Rating], summary: 'Fetch all rating', description: 'Fetch all rating', responses: {'200': {description: 'Returns all rating'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Rating], description: 'Create a new rating', summary: 'Create a new rating', parameters: [{name: body, in: body, description: 'Rating object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/RatingBody'}}], responses: {'200': {description: 'Returns all rating'}}}}
    '/rating/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Rating], summary: 'Fetch specific rating from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Rating to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Rating], summary: 'Update existing rating', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated rating object', required: true, schema: {$ref: '#/definitions/RatingBody'}}], responses: {'200': {description: 'Update rating'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Rating], summary: 'Delete specific rating from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Rating to delete', type: string}], responses: {'200': {description: 'Delete the Rating with the specified id'}, '404': {description: 'Rating not found'}}}}
    /availability: {get: {security: [{ApiKeyAuth: []}], tags: [Availability], summary: 'Fetch all availability', description: 'Fetch all availability', responses: {'200': {description: 'Returns all availability'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Availability], description: 'Create a new availability', summary: 'Create a new availability', parameters: [{name: body, in: body, description: 'Availability object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/AvailabilityBody'}}], responses: {'200': {description: 'Returns all availability'}}}}
    '/availability/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Availability], summary: 'Fetch specific availability from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Availability to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Availability], summary: 'Update existing availability', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated availability object', required: true, schema: {$ref: '#/definitions/AvailabilityBody'}}], responses: {'200': {description: 'Update availability'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Availability], summary: 'Delete specific availability from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Availability to delete', type: string}], responses: {'200': {description: 'Delete the Availability with the specified id'}, '404': {description: 'Availability not found'}}}}
    /employmentdetails: {get: {security: [{ApiKeyAuth: []}], tags: [Employmentdetails], summary: 'Fetch all employmentdetails', description: 'Fetch all employmentdetails', responses: {'200': {description: 'Returns all employmentdetails'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Employmentdetails], description: 'Create a new employmentdetails', summary: 'Create a new employmentdetails', parameters: [{name: body, in: body, description: 'Employmentdetails object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/EmploymentdetailsBody'}}], responses: {'200': {description: 'Returns all employmentdetails'}}}}
    '/employmentdetails/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Employmentdetails], summary: 'Fetch specific employmentdetails from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Employmentdetails to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Employmentdetails], summary: 'Update existing employmentdetails', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated employmentdetails object', required: true, schema: {$ref: '#/definitions/EmploymentdetailsBody'}}], responses: {'200': {description: 'Update employmentdetails'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Employmentdetails], summary: 'Delete specific employmentdetails from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Employmentdetails to delete', type: string}], responses: {'200': {description: 'Delete the Employmentdetails with the specified id'}, '404': {description: 'Employmentdetails not found'}}}}
    /appointment: {get: {security: [{ApiKeyAuth: []}], tags: [Appointment], summary: 'Fetch all appointment', description: 'Fetch all appointment', responses: {'200': {description: 'Returns all appointment'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Appointment], description: 'Create a new appointment', summary: 'Create a new appointment', parameters: [{name: body, in: body, description: 'Appointment object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/AppointmentBody'}}], responses: {'200': {description: 'Returns all appointment'}}}}
    '/appointment/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Appointment], summary: 'Fetch specific appointment from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Appointment to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Appointment], summary: 'Update existing appointment', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated appointment object', required: true, schema: {$ref: '#/definitions/AppointmentBody'}}], responses: {'200': {description: 'Update appointment'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Appointment], summary: 'Delete specific appointment from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Appointment to delete', type: string}], responses: {'200': {description: 'Delete the Appointment with the specified id'}, '404': {description: 'Appointment not found'}}}}
    /appointedcarer: {get: {security: [{ApiKeyAuth: []}], tags: [Appointedcarer], summary: 'Fetch all appointedcarer', description: 'Fetch all appointedcarer', responses: {'200': {description: 'Returns all appointedcarer'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Appointedcarer], description: 'Create a new appointedcarer', summary: 'Create a new appointedcarer', parameters: [{name: body, in: body, description: 'Appointedcarer object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/AppointedcarerBody'}}], responses: {'200': {description: 'Returns all appointedcarer'}}}}
    '/appointedcarer/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Appointedcarer], summary: 'Fetch specific appointedcarer from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Appointedcarer to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Appointedcarer], summary: 'Update existing appointedcarer', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated appointedcarer object', required: true, schema: {$ref: '#/definitions/AppointedcarerBody'}}], responses: {'200': {description: 'Update appointedcarer'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Appointedcarer], summary: 'Delete specific appointedcarer from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Appointedcarer to delete', type: string}], responses: {'200': {description: 'Delete the Appointedcarer with the specified id'}, '404': {description: 'Appointedcarer not found'}}}}
    /plantypes: {get: {security: [{ApiKeyAuth: []}], tags: [Plantypes], summary: 'Fetch all plantypes', description: 'Fetch all plantypes', responses: {'200': {description: 'Returns all plantypes'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Plantypes], description: 'Create a new plantypes', summary: 'Create a new plantypes', parameters: [{name: body, in: body, description: 'Plantypes object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/PlantypesBody'}}], responses: {'200': {description: 'Returns all plantypes'}}}}
    '/plantypes/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Plantypes], summary: 'Fetch specific plantypes from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Plantypes to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Plantypes], summary: 'Update existing plantypes', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated plantypes object', required: true, schema: {$ref: '#/definitions/PlantypesBody'}}], responses: {'200': {description: 'Update plantypes'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Plantypes], summary: 'Delete specific plantypes from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Plantypes to delete', type: string}], responses: {'200': {description: 'Delete the Plantypes with the specified id'}, '404': {description: 'Plantypes not found'}}}}
    /service: {get: {security: [{ApiKeyAuth: []}], tags: [Service], summary: 'Fetch all service', description: 'Fetch all service', responses: {'200': {description: 'Returns all service'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Service], description: 'Create a new service', summary: 'Create a new service', parameters: [{name: body, in: body, description: 'Service object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/ServiceBody'}}], responses: {'200': {description: 'Returns all service'}}}}
    '/service/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Service], summary: 'Fetch specific service from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Service to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Service], summary: 'Update existing service', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated service object', required: true, schema: {$ref: '#/definitions/ServiceBody'}}], responses: {'200': {description: 'Update service'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Service], summary: 'Delete specific service from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Service to delete', type: string}], responses: {'200': {description: 'Delete the Service with the specified id'}, '404': {description: 'Service not found'}}}}
    /careplan: {get: {security: [{ApiKeyAuth: []}], tags: [Careplan], summary: 'Fetch all careplan', description: 'Fetch all careplan', responses: {'200': {description: 'Returns all careplan'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Careplan], description: 'Create a new careplan', summary: 'Create a new careplan', parameters: [{name: body, in: body, description: 'Careplan object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/CareplanBody'}}], responses: {'200': {description: 'Returns all careplan'}}}}
    '/careplan/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Careplan], summary: 'Fetch specific careplan from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Careplan to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Careplan], summary: 'Update existing careplan', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated careplan object', required: true, schema: {$ref: '#/definitions/CareplanBody'}}], responses: {'200': {description: 'Update careplan'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Careplan], summary: 'Delete specific careplan from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Careplan to delete', type: string}], responses: {'200': {description: 'Delete the Careplan with the specified id'}, '404': {description: 'Careplan not found'}}}}
    /careservice: {get: {security: [{ApiKeyAuth: []}], tags: [Careservice], summary: 'Fetch all careservice', description: 'Fetch all careservice', responses: {'200': {description: 'Returns all careservice'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Careservice], description: 'Create a new careservice', summary: 'Create a new careservice', parameters: [{name: body, in: body, description: 'Careservice object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/CareserviceBody'}}], responses: {'200': {description: 'Returns all careservice'}}}}
    '/careservice/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Careservice], summary: 'Fetch specific careservice from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Careservice to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Careservice], summary: 'Update existing careservice', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated careservice object', required: true, schema: {$ref: '#/definitions/CareserviceBody'}}], responses: {'200': {description: 'Update careservice'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Careservice], summary: 'Delete specific careservice from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Careservice to delete', type: string}], responses: {'200': {description: 'Delete the Careservice with the specified id'}, '404': {description: 'Careservice not found'}}}}
    /appointmentservice: {get: {security: [{ApiKeyAuth: []}], tags: [Appointmentservice], summary: 'Fetch all appointmentservice', description: 'Fetch all appointmentservice', responses: {'200': {description: 'Returns all appointmentservice'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Appointmentservice], description: 'Create a new appointmentservice', summary: 'Create a new appointmentservice', parameters: [{name: body, in: body, description: 'Appointmentservice object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/AppointmentserviceBody'}}], responses: {'200': {description: 'Returns all appointmentservice'}}}}
    '/appointmentservice/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Appointmentservice], summary: 'Fetch specific appointmentservice from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Appointmentservice to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Appointmentservice], summary: 'Update existing appointmentservice', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated appointmentservice object', required: true, schema: {$ref: '#/definitions/AppointmentserviceBody'}}], responses: {'200': {description: 'Update appointmentservice'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Appointmentservice], summary: 'Delete specific appointmentservice from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Appointmentservice to delete', type: string}], responses: {'200': {description: 'Delete the Appointmentservice with the specified id'}, '404': {description: 'Appointmentservice not found'}}}}
    /careplandetails: {get: {security: [{ApiKeyAuth: []}], tags: [Careplandetails], summary: 'Fetch all careplandetails', description: 'Fetch all careplandetails', responses: {'200': {description: 'Returns all careplandetails'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Careplandetails], description: 'Create a new careplandetails', summary: 'Create a new careplandetails', parameters: [{name: body, in: body, description: 'Careplandetails object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/CareplandetailsBody'}}], responses: {'200': {description: 'Returns all careplandetails'}}}}
    '/careplandetails/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Careplandetails], summary: 'Fetch specific careplandetails from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Careplandetails to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Careplandetails], summary: 'Update existing careplandetails', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated careplandetails object', required: true, schema: {$ref: '#/definitions/CareplandetailsBody'}}], responses: {'200': {description: 'Update careplandetails'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Careplandetails], summary: 'Delete specific careplandetails from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Careplandetails to delete', type: string}], responses: {'200': {description: 'Delete the Careplandetails with the specified id'}, '404': {description: 'Careplandetails not found'}}}}
    /document: {get: {security: [{ApiKeyAuth: []}], tags: [Document], summary: 'Fetch all document', description: 'Fetch all document', responses: {'200': {description: 'Returns all document'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Document], description: 'Create a new document', summary: 'Create a new document', parameters: [{name: body, in: body, description: 'Document object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/DocumentBody'}}], responses: {'200': {description: 'Returns all document'}}}}
    '/document/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Document], summary: 'Fetch specific document from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Document to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Document], summary: 'Update existing document', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated document object', required: true, schema: {$ref: '#/definitions/DocumentBody'}}], responses: {'200': {description: 'Update document'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Document], summary: 'Delete specific document from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Document to delete', type: string}], responses: {'200': {description: 'Delete the Document with the specified id'}, '404': {description: 'Document not found'}}}}
    /carerdocument: {get: {security: [{ApiKeyAuth: []}], tags: [Carerdocument], summary: 'Fetch all carerdocument', description: 'Fetch all carerdocument', responses: {'200': {description: 'Returns all carerdocument'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Carerdocument], description: 'Create a new carerdocument', summary: 'Create a new carerdocument', parameters: [{name: body, in: body, description: 'Carerdocument object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/CarerdocumentBody'}}], responses: {'200': {description: 'Returns all carerdocument'}}}}
    '/carerdocument/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Carerdocument], summary: 'Fetch specific carerdocument from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Carerdocument to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Carerdocument], summary: 'Update existing carerdocument', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated carerdocument object', required: true, schema: {$ref: '#/definitions/CarerdocumentBody'}}], responses: {'200': {description: 'Update carerdocument'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Carerdocument], summary: 'Delete specific carerdocument from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Carerdocument to delete', type: string}], responses: {'200': {description: 'Delete the Carerdocument with the specified id'}, '404': {description: 'Carerdocument not found'}}}}
    /residentdocument: {get: {security: [{ApiKeyAuth: []}], tags: [Residentdocument], summary: 'Fetch all residentdocument', description: 'Fetch all residentdocument', responses: {'200': {description: 'Returns all residentdocument'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Residentdocument], description: 'Create a new residentdocument', summary: 'Create a new residentdocument', parameters: [{name: body, in: body, description: 'Residentdocument object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/ResidentdocumentBody'}}], responses: {'200': {description: 'Returns all residentdocument'}}}}
    '/residentdocument/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Residentdocument], summary: 'Fetch specific residentdocument from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Residentdocument to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Residentdocument], summary: 'Update existing residentdocument', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated residentdocument object', required: true, schema: {$ref: '#/definitions/ResidentdocumentBody'}}], responses: {'200': {description: 'Update residentdocument'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Residentdocument], summary: 'Delete specific residentdocument from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Residentdocument to delete', type: string}], responses: {'200': {description: 'Delete the Residentdocument with the specified id'}, '404': {description: 'Residentdocument not found'}}}}
    /profiledocument: {get: {security: [{ApiKeyAuth: []}], tags: [Profiledocument], summary: 'Fetch all profiledocument', description: 'Fetch all profiledocument', responses: {'200': {description: 'Returns all profiledocument'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Profiledocument], description: 'Create a new profiledocument', summary: 'Create a new profiledocument', parameters: [{name: body, in: body, description: 'Profiledocument object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/ProfiledocumentBody'}}], responses: {'200': {description: 'Returns all profiledocument'}}}}
    '/profiledocument/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Profiledocument], summary: 'Fetch specific profiledocument from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Profiledocument to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Profiledocument], summary: 'Update existing profiledocument', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated profiledocument object', required: true, schema: {$ref: '#/definitions/ProfiledocumentBody'}}], responses: {'200': {description: 'Update profiledocument'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Profiledocument], summary: 'Delete specific profiledocument from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Profiledocument to delete', type: string}], responses: {'200': {description: 'Delete the Profiledocument with the specified id'}, '404': {description: 'Profiledocument not found'}}}}
    /permissions: {get: {security: [{ApiKeyAuth: []}], tags: [Permissions], summary: 'Fetch all permissions', description: 'Fetch all permissions', responses: {'200': {description: 'Returns all permissions'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Permissions], description: 'Create a new permissions', summary: 'Create a new permissions', parameters: [{name: body, in: body, description: 'Permissions object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/PermissionsBody'}}], responses: {'200': {description: 'Returns all permissions'}}}}
    '/permissions/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Permissions], summary: 'Fetch specific permissions from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Permissions to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Permissions], summary: 'Update existing permissions', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated permissions object', required: true, schema: {$ref: '#/definitions/PermissionsBody'}}], responses: {'200': {description: 'Update permissions'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Permissions], summary: 'Delete specific permissions from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Permissions to delete', type: string}], responses: {'200': {description: 'Delete the Permissions with the specified id'}, '404': {description: 'Permissions not found'}}}}
    /profilepermission: {get: {security: [{ApiKeyAuth: []}], tags: [Profilepermission], summary: 'Fetch all profilepermission', description: 'Fetch all profilepermission', responses: {'200': {description: 'Returns all profilepermission'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Profilepermission], description: 'Create a new profilepermission', summary: 'Create a new profilepermission', parameters: [{name: body, in: body, description: 'Profilepermission object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/ProfilepermissionBody'}}], responses: {'200': {description: 'Returns all profilepermission'}}}}
    '/profilepermission/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Profilepermission], summary: 'Fetch specific profilepermission from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Profilepermission to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Profilepermission], summary: 'Update existing profilepermission', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated profilepermission object', required: true, schema: {$ref: '#/definitions/ProfilepermissionBody'}}], responses: {'200': {description: 'Update profilepermission'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Profilepermission], summary: 'Delete specific profilepermission from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Profilepermission to delete', type: string}], responses: {'200': {description: 'Delete the Profilepermission with the specified id'}, '404': {description: 'Profilepermission not found'}}}}
    /contacttype: {get: {security: [{ApiKeyAuth: []}], tags: [Contacttype], summary: 'Fetch all contacttype', description: 'Fetch all contacttype', responses: {'200': {description: 'Returns all contacttype'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Contacttype], description: 'Create a new contacttype', summary: 'Create a new contacttype', parameters: [{name: body, in: body, description: 'Contacttype object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/ContacttypeBody'}}], responses: {'200': {description: 'Returns all contacttype'}}}}
    '/contacttype/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Contacttype], summary: 'Fetch specific contacttype from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Contacttype to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Contacttype], summary: 'Update existing contacttype', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated contacttype object', required: true, schema: {$ref: '#/definitions/ContacttypeBody'}}], responses: {'200': {description: 'Update contacttype'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Contacttype], summary: 'Delete specific contacttype from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Contacttype to delete', type: string}], responses: {'200': {description: 'Delete the Contacttype with the specified id'}, '404': {description: 'Contacttype not found'}}}}
    '/contacttype/pagetype/{page_type}/{profile_id}': {get: {security: [{ApiKeyAuth: []}], tags: [Contacttype], summary: 'Fetch specific contact type from page_type', parameters: [{name: page_type, in: path, required: true, description: 'The page_type of the Contacttype to retrieve', type: string}, {name: profile_id, in: path, required: true, description: 'The profile_id of the Contacttype to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}}
    /contact: {get: {security: [{ApiKeyAuth: []}], tags: [Contact], summary: 'Fetch all contact', description: 'Fetch all contact', responses: {'200': {description: 'Returns all contact'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Contact], description: 'Create a new contact', summary: 'Create a new contact', parameters: [{name: body, in: body, description: 'Contact object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/ContactBody'}}], responses: {'200': {description: 'Returns all contact'}}}}
    '/contact/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Contact], summary: 'Fetch specific contact from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Contact to retrieve', type: string}], responses: {'201': {description: 'Return the ${service} with the specified id'}, '404': {description: '${service} not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Contact], summary: 'Update existing contact', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated contact object', required: true, schema: {$ref: '#/definitions/ContactBody'}}], responses: {'200': {description: 'Update contact'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Contact], summary: 'Delete specific contact from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Contact to delete', type: string}], responses: {'200': {description: 'Delete the Contact with the specified id'}, '404': {description: 'Contact not found'}}}}
    '/contact/profile/{profile_id}/{page_type}': {get: {security: [{ApiKeyAuth: []}], tags: [Contact], summary: 'Fetch specific contact type from page_type', parameters: [{name: profile_id, in: path, required: true, description: 'The profile_id of the Contact to retrieve', type: string}, {name: page_type, in: path, required: true, description: 'The page_type of the Contact to retrieve', type: string}], responses: {'201': {description: 'Return the Contact with the specified value'}, '404': {description: 'Contact not found'}}}}
    /job_type: {get: {security: [{ApiKeyAuth: []}], tags: [Jobtype], summary: 'Fetch all job_type', description: 'Fetch all job_type', responses: {'200': {description: 'Returns all job_type'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Jobtype], description: 'Create a new job_type', summary: 'Create a new job_type', parameters: [{name: body, in: body, description: 'Jobtype object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/JobtypeBody'}}], responses: {'200': {description: 'Returns all job_type'}}}}
    '/job_type/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Jobtype], summary: 'Fetch specific job_type from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Jobtype to retrieve', type: string}], responses: {'201': {description: 'Return the Jobtype with the specified id'}, '404': {description: 'Jobtype not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Jobtype], summary: 'Update existing job_type', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated job_type object', required: true, schema: {$ref: '#/definitions/JobtypeBody'}}], responses: {'200': {description: 'Update job_type'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Jobtype], summary: 'Delete specific job_type from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Jobtype to delete', type: string}], responses: {'200': {description: 'Delete the Jobtype with the specified id'}, '404': {description: 'Jobtype not found'}}}}
    /upload: {post: {security: [{ApiKeyAuth: []}], tags: [Upload], description: 'Uploads a file.', summary: 'Uploads a file.', consumes: [multipart/form-data], parameters: [{name: file, in: formData, type: file, description: 'The file to upload.', required: true}], responses: {'200': {description: 'Returns responce object from AWS S3'}}}}
    /additionalinfo: {get: {security: [{ApiKeyAuth: []}], tags: [Additionalinfo], summary: 'Fetch all additionalinfo', description: 'Fetch all additionalinfo', responses: {'200': {description: 'Returns all additionalinfo'}}}, post: {security: [{ApiKeyAuth: []}], tags: [Additionalinfo], description: 'Create a new additionalinfo', summary: 'Create a new additionalinfo', parameters: [{name: body, in: body, description: 'Additionalinfo object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/AdditionalinfoBody'}}], responses: {'200': {description: 'Returns all additionalinfo'}}}}
    '/additionalinfo/{id}': {get: {security: [{ApiKeyAuth: []}], tags: [Additionalinfo], summary: 'Fetch specific additionalinfo from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Additionalinfo to retrieve', type: string}], responses: {'201': {description: 'Return the Additionalinfo with the specified id'}, '404': {description: 'Additionalinfo not found'}}}, put: {security: [{ApiKeyAuth: []}], tags: [Additionalinfo], summary: 'Update existing additionalinfo', parameters: [{name: id, in: path, description: 'id that need to be updated', required: true, type: string}, {in: body, name: body, description: 'Updated additionalinfo object', required: true, schema: {$ref: '#/definitions/AdditionalinfoBody'}}], responses: {'200': {description: 'Update additionalinfo'}}}, delete: {security: [{ApiKeyAuth: []}], tags: [Additionalinfo], summary: 'Delete specific additionalinfo from id', parameters: [{name: id, in: path, required: true, description: 'The id of the Additionalinfo to delete', type: string}], responses: {'200': {description: 'Delete the Additionalinfo with the specified id'}, '404': {description: 'Additionalinfo not found'}}}}
