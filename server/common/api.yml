swagger: "2.0"
info:
  version: 1.0.0
  title: Carehome
  description: Carehome Microservices
basePath: /v1
tags:
  - name: Users
    description: Simple example endpoints
  - name: Tenants
    description: List of all Tenants
  - name: Auth
    description: Authentication API
  - name: Profile
    description: Profile API
  - name: ProfileType
    description: Profile Type API

consumes:
  - application/json
produces:
  - application/json

definitions:
  UserBody:
    type: object
    title: User
    required:
      - user_name
      - password
      - email
      - enabled
    properties:
      user_name:
        type: string
        example: admin
      password:
        type: string
        example: admin
      email:
        type: string
        example: admin@example.com
      enabled:
        type: boolean
        example: true
  TenantBody:
    type: object
    title: Tenant
    required:
      - tenant_name
      - organization
      - config
      - is_deleted
      - db_user
      - db_password
      - db_port
      - db_host
      - email
    properties:
      organization:
        type: string
        example: Logezy Info Tech
      config:
        type: string
        example: '{some json string}'
      is_deleted:
        type: boolean
        example: true
      db_user:
        type: string
        example: home_care
      db_password:
        type: string
        example: your_db_password
      db_port:
        type: integer
        example: 3306
      db_host:
        type: string
        example: localhost
      email:
        type: string
        example: admin@logezy.com
  ProfileBody:
    type: object
    title: Profile
    required:
      - profile_type_id
      - user_id
      - first_name
      - last_name
      - title
      - email
      - mobile_no
      - phone1
      - gender
      - date_of_birth
      - martial_status
    properties:
      profile_type_id:
        type: string
        example: 1
      user_id:
        type: integer
        example: 2
      code:
        type: string
      first_name:
        type: string
        example: 'Nijesh'
      last_name:
        type: string
        example: 'W'
      nick_name:
        type: string
        example: 'Nigesh'
      image:
        type: string
        example: 'http://google.com/image.jpg'
      title:
        type: string
        example: 'Mr'
      email:
        type: string
        example: 'admin@text.com'
      mobile_no:
        type: string
        example: '123456789'
      phone1:
        type: string
        example: '1234567890'
      phone2:
        type: string
        example: '1234567890'
      gender:
        type: string
        example: 'Male'
      religion:
        type: string
        example: 'Hindu'
      martial_status:
        type: string
        example: 'Single'
      date_of_birth:
        type: string
        example: '17/01/1991'
      is_enabled:
        type: boolean
        example: true
      is_deleted:
        type: boolean
        example: false
  ProfileTypeBody:
    type: object
    title: ProfileType
    required:
      - name
    properties:
      name:
        type: string
        example: 'Resident'

paths:
  /users:
    get:
      tags:
        - Users
      description: Fetch all users
      responses:
        200:
          description: Returns all users
    post:
      tags:
        - Users
      description: Create a new example
      parameters:
        - name: body
          in: body
          description: User object that needs to be added to the store
          required: true
          schema: 
            $ref: "#/definitions/UserBody"
      responses:
        200:
          description: Returns all examples
  /users/{user_name}:
    get:
      tags:
        - Users
      parameters:
        - name: user_name
          in: path
          required: true
          description: The user_name of the user to retrieve
          type: string
      responses:
        201:
          description: Return the user with the specified user_name
        404:
          description: User not found
    delete:
      tags:
        - Users
      parameters:
        - name: user_name
          in: path
          required: true
          description: The user_name of the user to delete
          type: string
      responses:
        200:
          description: Delete the user with the specified user_name
        404:
          description: User not found

  /tenants:
    get:
      tags:
        - Tenants
      description: Fetch all tenants
      responses:
        200:
          description: Returns all tenants
    post:
      tags:
        - Tenants
      summary: Create a new tenant
      parameters:
        - name: body
          in: body
          description: Tenant object that needs to be added to the store
          required: true
          schema:
            $ref: "#/definitions/TenantBody"
      responses:
        200:
          description: Created new tenant
  /tenants/{tenant_name}:
    get:
      tags:
        - Tenants
      parameters:
        - name: tenant_name
          in: path
          required: true
          description: The tenant_name of the user to retrieve
          type: string
      responses:
        201:
          description: Return the user with the specified tenant_name
        404:
          description: User not found
    delete:
      tags:
        - Tenants
      parameters:
        - name: tenant_name
          in: path
          required: true
          description: The tenant_name of the user to delete
          type: string
      responses:
        200:
          description: Delete the user with the specified tenant_name
        404:
          description: User not found

  /auth/login:
    post:
      tags:
        - Auth
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            type: object
            required: true
            properties:
              user_name:
                type: string
              password:
                type: string
      responses:
        200:
          description: Return the API authentication and authorization
  /auth/client/signup:
    post:
      tags:
        - Auth
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true    
          schema:
            type: object
            required: true        
            properties:
              user_name:
                type: string
              password:
                type: string
              email:
                type: string
              organization:
                type: string
              is_deleted:
                type: boolean
              config:
                type: string
      responses:
        200:
          description: Will create new tenant, user, user tenant
  /auth/carer/signup:
    post:
      tags:
        - Auth
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required: true        
            properties:
              user_name:
                type: string
              password:
                type: string
              slug:
                type: string
      responses:
        200:
          description: Will signup new carer
  
  /profile:
    get:
      tags:
        - Profile
      description: Fetch all profiles
      responses:
        200:
          description: Returns all profiles
    post:
      tags:
        - Profile
      summary: Create a new profile
      parameters:
        - name: body
          in: body
          description: Profile object that needs to be added to the store
          required: true
          schema:
            $ref: "#/definitions/ProfileBody"
      responses:
        200:
          description: Created new profile
  /profile/{id}:
    get:
      tags:
        - Profile
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the Profile to retrieve
          type: string
      responses:
        201:
          description: Return the Profile with the specified id
        404:
          description: Profile not found
    put:
      tags:
        - Profile
      summary: Update existing profile
      parameters:
        - name: "id"
          in: "path"
          description: "id that need to be updated"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Updated profile object"
          required: true
          schema:
            $ref: "#/definitions/ProfileBody"
      responses:
        200:
          description: Update profile
    delete:
      tags:
        - Profile
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the Profile to delete
          type: string
      responses:
        200:
          description: Delete the Profile with the specified id
        404:
          description: Profile not found
  /profiletype:
    get:
      tags:
        - ProfileType
      description: Fetch all profile types
      responses:
        200:
          description: Returns all profile types
    post:
      tags:
        - ProfileType
      summary: Create a new profile type
      parameters:
        - name: body
          in: body
          description: Profile type object that needs to be added to the store
          required: true
          schema:
            $ref: "#/definitions/ProfileTypeBody"
      responses:
        200:
          description: Created new profile type
  /profiletype/{id}:
    get:
      tags:
        - ProfileType
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the ProfileType to retrieve
          type: string
      responses:
        201:
          description: Return the ProfileType with the specified id
        404:
          description: ProfileType not found
    put:
      tags:
        - ProfileType
      summary: Update existing profile
      parameters:
        - name: "id"
          in: "path"
          description: "id that need to be updated"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Updated profile object"
          required: true
          schema:
            $ref: "#/definitions/ProfileTypeBody"
      responses:
        200:
          description: Update profile type
    delete:
      tags:
        - ProfileType
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the ProfileType to delete
          type: string
      responses:
        200:
          description: Delete the ProfileType with the specified id
        404:
          description: ProfileType not found