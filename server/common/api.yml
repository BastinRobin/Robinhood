swagger: '2.0'
info:
    version: 1.0.0
    title: Carehome
    description: 'Carehome Microservices'
basePath: /v1
tags:
    - {name: Users, description: 'Users API'}
    - {name: Tenants, description: 'Tenants API'}
    - {name: Auth, description: 'Authentication API'}
consumes:
    - application/json
produces:
    - application/json
securityDefinitions:
    ApiKeyAuth: {type: apiKey, in: header, name: token}
definitions:
    UserBody: {type: object, title: User, required: [user_name, password, email, enabled], properties: {user_name: {type: string, example: admin}, password: {type: string, example: admin}, email: {type: string, example: admin@example.com}, enabled: {type: boolean, example: true}}}
    TenantBody: {type: object, title: Tenant, required: [tenant_name, organization, config, is_deleted, db_user, db_password, db_port, db_host, email], properties: {organization: {type: string, example: 'Logezy Info Tech'}, config: {type: string, example: '{some json string}'}, is_deleted: {type: boolean, example: true}, db_user: {type: string, example: home_care}, db_password: {type: string, example: your_db_password}, db_port: {type: integer, example: 3306}, db_host: {type: string, example: localhost}, email: {type: string, example: admin@logezy.com}}}
paths:
    /users: {get: {tags: [Users], description: 'Fetch all users', responses: {'200': {description: 'Returns all users'}}}, post: {tags: [Users], description: 'Create a new example', parameters: [{name: body, in: body, description: 'User object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/UserBody'}}], responses: {'200': {description: 'Returns all examples'}}}}
    '/users/{user_name}': {get: {tags: [Users], parameters: [{name: user_name, in: path, required: true, description: 'The user_name of the user to retrieve', type: string}], responses: {'201': {description: 'Return the user with the specified user_name'}, '404': {description: 'User not found'}}}, delete: {tags: [Users], parameters: [{name: user_name, in: path, required: true, description: 'The user_name of the user to delete', type: string}], responses: {'200': {description: 'Delete the user with the specified user_name'}, '404': {description: 'User not found'}}}}
    /tenants: {get: {tags: [Tenants], description: 'Fetch all tenants', responses: {'200': {description: 'Returns all tenants'}}}, post: {tags: [Tenants], summary: 'Create a new tenant', parameters: [{name: body, in: body, description: 'Tenant object that needs to be added to the store', required: true, schema: {$ref: '#/definitions/TenantBody'}}], responses: {'200': {description: 'Created new tenant'}}}}
    '/tenants/{tenant_name}': {get: {tags: [Tenants], parameters: [{name: tenant_name, in: path, required: true, description: 'The tenant_name of the user to retrieve', type: string}], responses: {'201': {description: 'Return the user with the specified tenant_name'}, '404': {description: 'User not found'}}}, delete: {tags: [Tenants], parameters: [{name: tenant_name, in: path, required: true, description: 'The tenant_name of the user to delete', type: string}], responses: {'200': {description: 'Delete the user with the specified tenant_name'}, '404': {description: 'User not found'}}}}
    /auth/login: {post: {tags: [Auth], consumes: [application/json], parameters: [{name: body, in: body, schema: {type: object, required: true, properties: {user_name: {type: string}, email: {type: string}, password: {type: string}}}}], responses: {'200': {description: 'Return the API authentication and authorization'}}}}
    /auth/client/signup: {post: {tags: [Auth], consumes: [application/json], parameters: [{name: body, in: body, required: true, schema: {type: object, required: true, properties: {user_name: {type: string}, password: {type: string}, email: {type: string}, organization: {type: string}, is_deleted: {type: boolean}, config: {type: string}}}}], responses: {'200': {description: 'Will create new tenant, user, user tenant'}}}}
    /auth/carer/signup: {post: {tags: [Auth], consumes: [application/json], parameters: [{name: body, in: body, required: true, schema: {type: object, required: true, properties: {user_name: {type: string}, password: {type: string}, slug: {type: string}}}}], responses: {'200': {description: 'Will signup new carer'}}}}
